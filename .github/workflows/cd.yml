name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: hello-world-api
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Node.js Version
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install Dependencies
        run: npm install

      - name: Build Project
        run: npm run build

      - name: Run Integration Tests
        run: npm run test:e2e

      - name: Save Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: ./dist

  release:
    name: Semantic Release & Docker Image
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_NAME: hello-world-api
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output
      
      - name: Install Semantic Release Dependencies
        run: npm install @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/git @semantic-release/github @semantic-release/npm @semantic-release/release-notes-generator

      - name: Obtain version
        id: get_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export VERSION=$(npx semantic-release --dry-run | grep 'next release version is' | sed -E 's/.* ([[:digit:].]+)$/\1/')
          echo "version=${VERSION}-${GITHUB_SHA::12}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}-${GITHUB_SHA::12}" >> $GITHUB_ENV
      - name: Perform release
        id: perform_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
      - name: view generated version
        run: echo "version=${{ steps.get_version.outputs.version }}"

      - name: Build Docker Image
        run: |
          docker build -t quay.io/${{ secrets.QUAY_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }} .

      - name: Login to Quay.io
        run: echo "${{ secrets.QUAY_PASSWORD }}" | docker login quay.io -u "${{ secrets.QUAY_USERNAME }}" --password-stdin

      - name: Push Docker Image to Quay.io
        run: docker push quay.io/${{ secrets.QUAY_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}

  deploy:
    name: Deploy to OpenShift
    runs-on: ubuntu-latest
    needs: release
    env:
      VERSION: ${{ needs.release.outputs.version }}
    steps:
      - name: Install OpenShift CLI
        run: |
          sudo curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz -o oc.tar.gz
          tar -xvf oc.tar.gz
          sudo mv oc /usr/local/bin/oc
          oc version

      - name: Login to OpenShift
        run: |
          oc login "${{ secrets.OPENSHIFT_API_URL }}" --token="${{ secrets.OPENSHIFT_TOKEN }}" --insecure-skip-tls-verify=true

      - name: Set Kubernetes Project
        run: |
          oc project miguelangel0207bcn-dev

      - name: Update and Apply Deployment Configuration
        run: |
          sed -i "s|quay.io/miguelangel0207bcn-dev/hello-world-api:1.0.0-0842d3ca35d7|quay.io/${{ secrets.QUAY_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}|g" ./k8s/deployment.yaml
          oc apply -f ./k8s/deployment.yaml
